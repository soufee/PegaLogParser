boolean bDeleteFile = (new Boolean(tools.getParamValue("bDeleteFile"))).booleanValue();
String xlFileName = tools.getParamValue("FSFileName");
java.io.InputStream xlIS = null;
oLog.infoForced("Начало загрузки файла Excel: " + xlFileName);

try {
  ClipboardPage currentPage = tools.getStepPage();
  ClipboardProperty errorProperty = currentPage.getProperty("ValidationErrorMessage");

  ClipboardPage configPage = tools.findPage("tempFileStructure");
  ClipboardProperty configSheet;
  boolean SheetHasError = false;
  boolean HeaderHasError = false;
  boolean RowHasError = false;

  if (configPage != null){
    ClipboardProperty sheetList = configPage.getProperty("pxResults");
    if (sheetList != null){

      xlIS = new PRInputStream(xlFileName);
      org.apache.poi.xssf.usermodel.XSSFWorkbook ExcelBook = new org.apache.poi.xssf.usermodel.XSSFWorkbook(xlIS);
      int configSheetId = 0;
      Iterator<org.apache.poi.ss.usermodel.Sheet> sheetIterator = ExcelBook.sheetIterator();

      while (sheetIterator.hasNext()){
        org.apache.poi.ss.usermodel.Sheet currentSheet = sheetIterator.next();

        configSheetId = pega_rules_utilities.IndexInPageList(currentSheet.getSheetName(),"pyLabel",sheetList);
        if (configSheetId >= 0){
          configSheet = configPage.getProperty("pxResults("+Integer.toString(configSheetId)+")");

          // Get iterator to all the rows in current sheet
          Iterator<org.apache.poi.ss.usermodel.Row> rowIterator = currentSheet.iterator();
          boolean isHeader = true;
          Integer mappingList[] = new Integer[configSheet.getProperty("pxResults").size()];
          int headersCount = 0;
          HeaderHasError = false;
          String rowPropertyName = configSheet.getProperty("pyName").getStringValue();

          boolean isFirstItem = true;
          int lineCount=0;

          oLog.debug("Start parse header " + currentSheet.getSheetName());
          while (rowIterator.hasNext() && !HeaderHasError) {
            ++lineCount;
            boolean isEmptyLine = true;
            isFirstItem = true;

            org.apache.poi.ss.usermodel.Row row = rowIterator.next();
            // Get iterator to all cells of current row
            Iterator<org.apache.poi.ss.usermodel.Cell> cellIterator = row.cellIterator();

            if (isHeader){
              headersCount = row.getPhysicalNumberOfCells();
              mappingList = new Integer[headersCount];
			  oLog.debug("Header size " + currentSheet.getSheetName() + " is " + headersCount);
              while (cellIterator.hasNext()) {
                org.apache.poi.ss.usermodel.Cell cell = cellIterator.next();
                org.apache.poi.ss.usermodel.CellType cellType = cell.getCellTypeEnum();
                String HeaderItemName = "";

                switch (cellType) {
				  case BLANK:{
                    HeaderItemName = "";
                  }break;
                  case STRING:{
                    HeaderItemName = cell.getStringCellValue();
                  }break;
                  default:
                    errorProperty.setValue(errorProperty.getStringValue() + "Ошибка в структуре листа \""+currentSheet.getSheetName()+"\" \r\n");
                    HeaderHasError = true;
                    break;
                }
                int configCellId = -1;
                if (HeaderItemName.length() > 0){
                  configCellId = pega_rules_utilities.IndexInPageList(HeaderItemName,"pyLabel",configSheet.getProperty("pxResults"));
                  if (configCellId < 0){
                    HeaderHasError = true;
                    errorProperty.setValue(errorProperty.getStringValue() + "Ошибка в структуре листа \""+currentSheet.getSheetName()+"\" в столбце \""+HeaderItemName+"\" \r\n");
                  }
                }else{
                  // fake cell in header - ignore it
                  headersCount = headersCount - 1;
                }
                int columnIndex = cell.getColumnIndex();
                oLog.debug("Cell index " + columnIndex);
                if (columnIndex < mappingList.length) {
                  mappingList[columnIndex] = configCellId;
                } else {
                  errorProperty.setValue(errorProperty.getStringValue() + "Ошибка в структуре листа \""+currentSheet.getSheetName()+"\" в столбце \""+HeaderItemName+"\" количество полей не соответствует количеству в мапинге \r\n");
                }
              }

              ClipboardProperty configList = configSheet.getProperty("pxResults");
              java.util.List<Integer> mappings = java.util.Arrays.asList(mappingList);
              for(int i = 1; i <=configList.size(); ++i) {
              ClipboardProperty  configItem = configList.getPropertyValue(i);
              String isNotRequired = configItem.getProperty("IsNotRequired").getStringValue();
                if (isNotRequired == "true") {
                	continue;
			    }
				if (!mappings.contains(i)) {
                errorProperty.setValue(errorProperty.getStringValue() + "Ошибка в структуре листа \""+currentSheet.getSheetName()
                                                    +"\" количество полей не соответствует количеству в мапинге \r\n");
					HeaderHasError = true;
					break;
				}
			  }

              isHeader = false;
            }
            oLog.debug("End parse header " + currentSheet.getSheetName());
            if (!HeaderHasError){
              while (cellIterator.hasNext()) {
                org.apache.poi.ss.usermodel.Cell cell = cellIterator.next();
                org.apache.poi.ss.usermodel.CellType cellType = cell.getCellTypeEnum();

                // ignore additional columns in rows

                if (mappingList.length <= cell.getColumnIndex() || mappingList[cell.getColumnIndex()] == -1){
                  continue;
                }

                ClipboardProperty configItem = configSheet.getProperty("pxResults(" + Integer.toString(mappingList[cell.getColumnIndex()])+")");
                String itemPropertyName = configItem.getProperty("pyName").getStringValue();
                String itemPropertyType = configItem.getProperty("pyDataType").getStringValue();
                String itemPropertyLabel = configItem.getProperty("pyLabel").getStringValue();

                ClipboardProperty cProperty;
                ClipboardProperty cLine;
                ClipboardProperty cErrorProperty;
                if (isFirstItem) {
                  cLine = currentPage.getProperty(rowPropertyName +"(<APPEND>)");
                  isFirstItem = false;
                } else {
                  cLine = currentPage.getProperty(rowPropertyName +"(<LAST>)");
                }
                cProperty = cLine.getProperty(itemPropertyName);
                cErrorProperty = cLine.getProperty("ValidationMessages");
                switch (itemPropertyType){
                  case "STRING":{
                  String Value = "";
                    switch (cellType){
                      case BLANK:{
                      }break;
                      case NUMERIC:{
                        cell.setCellType(org.apache.poi.ss.usermodel.CellType.STRING);
                       cProperty.setValue(cell.getStringCellValue());
                       //cProperty.setValue(cell.getNumericCellValue());
                      }break;
                      case STRING:{
                        cProperty.setValue(cell.getStringCellValue());
                      }break;
                      case FORMULA:{
                        // Formula
                        org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator evaluator = ExcelBook.getCreationHelper().createFormulaEvaluator();
                        // Print out value evaluated by formula
                        cProperty.setValue(evaluator.evaluate(cell).getNumberValue());
                      }break;

                    }
                  }break;
                  case "INTEGER":{
                    String Value = "";
                    switch (cellType){
                      case BLANK: break;
                      case NUMERIC: {
                        double val = cell.getNumericCellValue();
                        if (val == (int) val)  {
                        	cProperty.setValue((int) val);
                        } else {
                          cErrorProperty.setValue(cErrorProperty.getStringValue() + itemPropertyLabel+" не соответствует формату - допускается ввод целых чисел\r\n");
                        }
                        break;
                      }
                      case STRING:{
                        try {
                          cProperty.setValue(Integer.parseInt(cell.getStringCellValue()));
						}
                        catch (NumberFormatException e) {
                          cErrorProperty.setValue(cErrorProperty.getStringValue() + itemPropertyLabel+" не соответствует формату - допускается ввод целых чисел\r\n");
						}
                       	break;
                      }
                      case FORMULA:{
                        // Formula
                        org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator evaluator = ExcelBook.getCreationHelper().createFormulaEvaluator();
                        // Print out value evaluated by formula
                        double val = evaluator.evaluate(cell).getNumberValue();
                        if (val == (int) val)  {
                        	cProperty.setValue((int) val);
                        } else {
                          cErrorProperty.setValue(cErrorProperty.getStringValue() + itemPropertyLabel+" не соответствует формату - допускается ввод целых чисел\r\n");
                        }
                        break;
                      }

                    }
                  }break;
                  case "DECIMAL":{
                    String Value = "";
                    switch (cellType) {
                      case BLANK: break;
                      case NUMERIC:{
                        cProperty.setValue(cell.getNumericCellValue());
                        break;
                      }
                      case STRING: {
                        String val = cell.getStringCellValue();
                        if (val.contains(".")) {
                          cErrorProperty.setValue(cErrorProperty.getStringValue() + itemPropertyLabel+" не соответствует формату - допускается ввод положительных дробных чисел с разделитем \",\"\r\n");
                          break;
                        }
                        try {
                          cProperty.setValue(Double.parseDouble(val.replace(",", ".")));
						} catch (NumberFormatException e) {
                          cErrorProperty.setValue(cErrorProperty.getStringValue() + itemPropertyLabel+" не соответствует формату - допускается ввод положительных дробных чисел с разделитем \",\"\r\n");
						}
                       	break;
                      }
                      case FORMULA:{
                        // Formula
                        org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator evaluator = ExcelBook.getCreationHelper().createFormulaEvaluator();
                        // Print out value evaluated by formula
                        cProperty.setValue(evaluator.evaluate(cell).getNumberValue());
                      }break;

                    }
                  }break;
                  case "DATE":{
                    String Value = "";
                    switch (cellType){
                      case BLANK:{
                      }break;
                      case NUMERIC:{
                        String timeZone = java.util.TimeZone.getDefault().getID();
                        cProperty.setValue(PRDateFormat.format("", timeZone, "yyyyMMdd", cell.getDateCellValue()));
                      }break;
                      case STRING:{
                        try {
							Date date = PRDateFormat.parse("", "GMT", "dd.MM.yyyy", cell.getStringCellValue());
                            cProperty.setValue(PRDateFormat.formatInternalDate(date));
						} catch (Exception ex) {
							cErrorProperty.setValue(cErrorProperty.getStringValue() + itemPropertyLabel+" не соответствует формату ДД.ММ.ГГГГ\r\n");
						}
                        break;
                      }
                      case FORMULA:{
                        // Formula
                        org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator evaluator = ExcelBook.getCreationHelper().createFormulaEvaluator();
                        // Print out value evaluated by formula
                        cProperty.setValue(evaluator.evaluate(cell).getNumberValue());
                        break;
                      }

                    }
                  }break;
                }
                String value = cProperty.getStringValue();
                oLog.debug(currentSheet.getSheetName() + ", " + lineCount + ": value=" + value);
                if (!cProperty.isEmpty() || !cErrorProperty.isEmpty()) {
                  isEmptyLine = false;
                }
              }
              oLog.debug(currentSheet.getSheetName() + ", " + lineCount);
              if (lineCount%100 == 0) {
                oLog.infoForced(currentSheet.getSheetName() + ", обработано " + lineCount + " строк");
              }
              if (isEmptyLine && !isFirstItem) {
                ClipboardProperty cLineList = currentPage.getProperty(rowPropertyName);
                if (cLineList.size() > 0) {
                    oLog.debug(currentSheet.getSheetName() + ", " + lineCount + ": removing: " + cLineList.size());
                 	cLineList.remove(cLineList.size());
                }
              }
            }
          }
        }else{
          errorProperty.setValue(errorProperty.getStringValue() + "Неизвестный лист \""+currentSheet.getSheetName()+"\" отсутствует описание структуры \r\n");
        }
      }
    }else{
      errorProperty.setValue(errorProperty.getStringValue() + "Ошибка в конфигурации листов \r\n");
    }
  }
}
catch (Exception e) {
	oLog.error("Error in parsing Excel file " + xlFileName, e);
	throw new RuntimeException(e);
//	tools.getPrimaryPage().addMessage("pzUnrecognizedFileTemplate\t" + templateName);
}
finally {
    oLog.infoForced("Завершена загрузка файла Excel: " + xlFileName);
	if (xlIS != null) {
		try {
			xlIS.close();
		}
		catch(Exception e) {
		}
	}
	try{
	if(bDeleteFile) {
		PRFile uploadedFile = new PRFile(xlFileName);
		if(uploadedFile!=null && uploadedFile.exists()){
			uploadedFile.delete();
		}
	}
	}
	catch(Exception ex)
	{
	 oLog.error("Error while deleting the file");
	}
}